" ----------------------------------------------------------------------------------------------------------------
" general
" ----------------------------------------------------------------------------------------------------------------
:filetype plugin on
set wildmenu
set mouse=a
set visualbell        " bell
set t_vb=             " .
set scrolloff=8       " extra lines while scrolling
set clipboard=unnamed
set ttimeoutlen=5     " key code delay
set viminfo+=n~/.vim/viminfo

" open file at last pos
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
\| exe "normal! g'\"" | endif

" save latest session on exit
fu! SaveSession()
    execute 'mksession! ~/.vim/latest-session.vim'
endfunction
autocmd VimLeave * call SaveSession()
" source latest session if invoked without arguments
autocmd VimEnter * if eval("@%") == "" | source ~/.vim/latest-session.vim | source ~/.vimrc | edit | endif


" ----------------------------------------------------------------------------------------------------------------
" ui
" ----------------------------------------------------------------------------------------------------------------
set number rnu      " line numbers
set nuw=6           " .
set splitbelow      " splits
set splitright      " .
syntax on           " other
set cmdheight=2     " .
set noshowmode      " .
set showcmd         " .
set signcolumn=yes  " sign column (left)

" cursor style
let &t_SI = "\ePtmux;\e\e]50;CursorShape=1\x7\e\\"
let &t_SR = "\ePtmux;\e\e]50;CursorShape=2\x7\e\\"
let &t_EI = "\ePtmux;\e\e]50;CursorShape=0\x7\e\\"
fu! SyncTermCursor()
    if mode() == 'i'
        :silent exec "!echo '\\ePtmux;\\e\\e]50;CursorShape=1\x7\\e\\'"
    elseif mode() == 'R'
        :silent exec "!echo '\\ePtmux;\\e\\e]50;CursorShape=2\x7\\e\\'"
    else
        :silent exec "!echo '\\ePtmux;\\e\\e]50;CursorShape=0\x7\\e\\'"
    endif
endfunction
autocmd FocusGained * call SyncTermCursor()
autocmd FocusLost * :silent exec "!echo '\\ePtmux;\\e\\e]50;CursorShape=0\x7\\e\\'"


" ----------------------------------------------------------------------------------------------------------------
" colors
" ----------------------------------------------------------------------------------------------------------------
" test colors: `:so $VIMRUNTIME/syntax/hitest.vim`
" syntax
hi Comment      term=NONE cterm=italic ctermfg=246 ctermbg=NONE " gray
hi Constant     term=NONE cterm=NONE ctermfg=211 ctermbg=NONE " light red
hi Special      term=NONE cterm=NONE ctermfg=188 ctermbg=NONE " pale purple
hi Identifier   term=bold cterm=NONE ctermfg=183 ctermbg=NONE " bright purple
hi Statement    term=NONE cterm=NONE ctermfg=153 ctermbg=NONE " bright blue
hi PreProc      term=NONE cterm=NONE ctermfg=153 ctermbg=NONE " bright blue
hi Type         term=NONE cterm=NONE ctermfg=147 ctermbg=NONE " darker blue
hi Underlined   term=NONE cterm=underline ctermfg=153 ctermbg=NONE " bright blue
hi Ignore       term=NONE cterm=NONE ctermfg=248 ctermbg=NONE " gray
" ui
hi SignColumn   ctermbg=NONE ctermfg=240
hi StatusLine   ctermbg=240  ctermfg=235
hi StatusLineNC ctermbg=240  ctermfg=235
hi FoldColumn   ctermbg=NONE ctermfg=NONE
hi Folded       cterm=italic ctermbg=NONE ctermfg=240
hi VertSplit    ctermbg=240  ctermfg=235
set fillchars=vert:\│
hi LineNr       ctermbg=NONE ctermfg=240
hi EndOfBuffer  ctermfg=240
" diff
hi DiffAdd      ctermbg=235
hi DiffChange   ctermbg=235
hi DiffDelete   ctermbg=235
hi DiffText     ctermbg=235


" ----------------------------------------------------------------------------------------------------------------
" text
" ----------------------------------------------------------------------------------------------------------------
set incsearch                 " search     
set hlsearch                  " .
set ignorecase                " .
set smartcase                 " .
set tabstop=4 softtabstop=4   " tabs
set shiftwidth=4 smarttab     " .
set expandtab                 " .   
filetype indent on            " .
set autoindent                " .
set smartindent               " .
set wrap                      " text wrapping
set linebreak                 " .


" ----------------------------------------------------------------------------------------------------------------
" keybindings
" ----------------------------------------------------------------------------------------------------------------
" normal and visual
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk
nnoremap gj j
vnoremap gj j
nnoremap gk k
vnoremap gk k
nnoremap x "_x
vnoremap x "_x
" normal
nnoremap <Esc> :noh<CR>
nnoremap <S-y> y$
nnoremap <C-p> "*p
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
" to fix vim randomly starting in R mode
nnoremap <esc>^[ <esc>^[
nnoremap <S-z><S-z> :wqa<CR>
" insert
"   inoremap jk <Esc>  " handled by karabiner
"   inoremap kj <Esc>  " handled by karabiner
"   spanish tildes
inoremap <F1> <Nop>
inoremap <F1>n ñ
inoremap <F1><S-n> Ñ
inoremap <F1><S-a> <C-k><S-a>'
inoremap <F1>a <C-k>a'
inoremap <F1><S-a> <C-k><S-a>'
inoremap <F1>e <C-k>e'
inoremap <F1><S-e> <C-k><S-e>'
inoremap <F1>i <C-k>i'
inoremap <F1><S-i> <C-k><S-i>'
inoremap <F1>u <C-k>u'
inoremap <F1><S-u> <C-k><S-u>'
inoremap <F1>o <C-k>o'
inoremap <F1><S-o> <C-k><S-o>'
"   german umlauts
inoremap <F2> <Nop>
inoremap <F2>s <C-k>ss
inoremap <F2>a <C-k>a<S-:>
inoremap <F2><S-a> <C-k><S-a><S-:>
inoremap <F2>u <C-k>u<S-:>
inoremap <F2><S-u> <C-k><S-u><S-:>
inoremap <F2>o <C-k>o<S-:>
inoremap <F2><S-o> <C-k><S-o><S-:>

" visual
vnoremap <C-c> "*y
vnoremap <C-x> "*d
vnoremap <C-p> d"*<S-p>

" markdown delete / yank / change in $$
autocmd BufNewFile,BufRead *.md nnoremap da$ F$df$
autocmd BufNewFile,BufRead *.md nnoremap di$ T$dt$
autocmd BufNewFile,BufRead *.md nnoremap ya$ F$yf$
autocmd BufNewFile,BufRead *.md nnoremap yi$ T$yt$
autocmd BufNewFile,BufRead *.md nnoremap ca$ F$cf$
autocmd BufNewFile,BufRead *.md nnoremap ci$ T$ct$

" :WE to :w :e
command! -nargs=1 -complete=file WE write | edit <args>

" shows syntax data below cursor
" map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
" \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
" \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" ----------------------------------------------------------------------------------------------------------------
" backups
" ----------------------------------------------------------------------------------------------------------------
set backup
set writebackup
set backupdir=$HOME/.vim/backup//
set backupcopy=yes
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,/var/folders

" create backup dir if it doesn't exist
if !isdirectory($HOME."~/.vim/backup")
  call mkdir($HOME."/.vim/backup", "p")
endif


" ----------------------------------------------------------------------------------------------------------------
" swap
" ----------------------------------------------------------------------------------------------------------------
set swapfile
set directory=~/.vim/swap//

" create swap dir if it doesn't exist
if !isdirectory($HOME."/.vim/swap")
  call mkdir($HOME."/.vim/swap", "p")
endif


" ----------------------------------------------------------------------------------------------------------------
" plugins
" ----------------------------------------------------------------------------------------------------------------
" you-complete-me
packadd you-complete-me
hi YcmErrorSection ctermbg=None

" markdown
autocmd BufReadPre *.md packadd markdown-preview.nvim
autocmd BufNewFile,BufRead *.md packadd pandoc-syntax
autocmd BufReadPost *.md call mkdp#util#install()
let g:mkdp_browser = 'Safari'
let g:mkdp_auto_close = 0
let g:mkdp_markdown_css = expand('~/.vim/markdown-preview/markdown.css')
augroup pandoc_syntax
    au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
augroup END
let g:pandoc#syntax#conceal#use = 0

" ultisnips
autocmd BufNewFile,BufRead *.md packadd ultisnips
let g:UltiSnipsExpandTrigger = '<C-s>'
let g:UltiSnipsJumpForwardTrigger = '<C-s>'
let g:UltiSnipsJumpBackwardTrigger = '<C-n>'
let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/UltiSnips']


silent! helptags ALL

