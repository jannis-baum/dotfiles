# --------------------------------
# CONTEXT DEFS 
# --------------------------------

global !p

def math():
	synstack = str(vim.eval("map(synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0)), {i,v -> synIDattr(v, 'name')})"))
	return "LaTex" in synstack or "tex" in synstack

endglobal


# --------------------------------
# SNIPPETS (not math)
# --------------------------------

# --------------------------------
# open math env 

context "not math()"
snippet mk "Math" wA
$$1$`!p
snip.rv = '' if not t[2] or t[2][0] in [',', '.', '?', '-', ' ', '\\', '\n'] else ' '
`$2
endsnippet

context "not math()"
snippet md "math block" A
$$
	$1
$$
endsnippet

context "not math()"
snippet ml "multiline math block" A
$$
\\begin{aligned}
	$1
\\end{aligned}
$$
endsnippet
  
# --------------------------------
# text elements 
  
context "not math()"
snippet eop "end of proof"
\\hfill $\\blacksquare$
endsnippet

# --------------------------------
# SNIPPETS (math) 
# --------------------------------

# --------------------------------
# paranthesis and left/rights 

context "math()"
snippet () "left right ()" iA
\\left( ${VISUAL}$1 \\right) 
endsnippet

context "math()"
snippet lr "left right general" iA
\\left$1 ${VISUAL}$2 \\right`!p
specials = {
	"("   : ")",
	"\\{" : "\\}",
	"["   : "]",
	"<"   : ">"
}
snip.rv = specials[t[1]] if t[1] in specials else t[1]`
endsnippet

# --------------------------------
# text, super-, subscript 

context "math()"
snippet tx "text" wA
\\textrm{$1}
endsnippet

context "math()"
snippet \.\.\. "dots" wA
\\dots
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript (1 digit)" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '(\S+)_([-a-zA-Z0-9]{2})' "auto subscript (general)" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}
endsnippet

context "math()"
snippet '(\S+)\^([-a-zA-Z0-9]{2})' "auto superscript (general)" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`$1}
endsnippet

# --------------------------------
# fractions 

context "math()"
snippet / "visual frac" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# --------------------------------
# common operations

context "math()"
snippet CEIL "ceil" iA
\\left\\lceil $1 \\right\\rceil
endsnippet

context "math()"
snippet FLOOR "floor" iA
\\left\\lfloor $1 \\right\\rfloor
endsnippet

context "math()"
snippet ABS "absolute value" iA
\\left\\lvert $1 \\right\\rvert
endsnippet

context "math()"
snippet NOT "negation overline" iA
\\overline{$1}
endsnippet

context "math()"
snippet HAT "hat" iA
\\hat{$1}
endsnippet

context "math()"
snippet CAP "cap" iA
\\cap
endsnippet

context "math()"
snippet CUP "cup" iA
\\cup
endsnippet

context "math()"
snippet EMP "empty set" iA
\\emptyset
endsnippet

context "math()"
snippet QA  "quantor all" iA
\\forall $1 \\in $2: 
endsnippet

context "math()"
snippet QE "quantor exists" A
\\exists $1 \\in $2: 
endsnippet

# --------------------------------
# typefaces

context "math()"
snippet CAL "mathcal" iA
\\mathcal\{$1\}
endsnippet

# --------------------------------
# symbols

context "math()"
snippet EPS "epsilon" iA
\\epsilon
endsnippet

context "math()"
snippet DELT "delta" iA
\\delta
endsnippet

context "math()"
snippet OMG "Omega" iA
\\Omega
endsnippet

context "math()"
snippet omg "omega" iA
\\omega
endsnippet

context "math()"
snippet NN "natural numbers" iA
\\mathbb\{N\}
endsnippet

context "math()"
snippet ZZ "whole numbers" iA
\\mathbb\{Z\}
endsnippet

context "math()"
snippet QQ "rational numbers" iA
\\mathbb\{Q\}
endsnippet

context "math()"
snippet RR "real numbers" iA
\\mathbb\{R\}
endsnippet

context "math()"
snippet NP "non deterministic polynomial" iA
\\textsf\{NP\}
endsnippet

context "math()"
snippet FF "event system" iA
\\mathfrak\{F\}
endsnippet

# --------------------------------
# equations

context "math()"
snippet AGL "aligned line" A
$1 &$2
	&&|~ $3 \\\\
endsnippet

# --------------------------------
# sympy 

snippet sympy "sympyblock " 
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet
